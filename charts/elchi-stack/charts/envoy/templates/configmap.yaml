apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-config
  namespace: {{ .Values.global.namespace }}
data:
  envoy.yaml: |
    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 1989
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              access_log:
                - name: envoy.access_loggers.stdout
                  filter:
                    header_filter:
                      header:
                        name: ":path"
                        string_match:
                          exact: "/opentelemetry.proto.collector.metrics.v1.MetricsService/Export"
                        invert_match: true
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                    log_format:
                      text_format_source:
                        inline_string: "[%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% Duration:%DURATION% ReqDuration:%REQUEST_DURATION% RespDuration:%RESPONSE_DURATION% Authority:\"%REQ(:AUTHORITY)%\" RequestID:\"%REQ(X-REQUEST-ID)%\" UserAgent:\"%REQ(USER-AGENT)%\" DownstreamLocal:\"%DOWNSTREAM_LOCAL_ADDRESS%\" DownstreamRemote:\"%DOWNSTREAM_REMOTE_ADDRESS%\" UpstreamLocal:\"%UPSTREAM_LOCAL_ADDRESS%\" UpstreamHost:\"%UPSTREAM_HOST%\" UpstreamCluster:\"%UPSTREAM_CLUSTER%\" UpstreamServiceTime:%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% UpstreamFailure:\"%UPSTREAM_TRANSPORT_FAILURE_REASON%\" ConnTermDetails:\"%CONNECTION_TERMINATION_DETAILS%\" ResponseCodeDetails:\"%RESPONSE_CODE_DETAILS%\" TargetCluster:\"%REQ(x-target-cluster)%\" NodeID:\"%REQ(nodeid)%\" EnvoyVersion:\"%REQ(envoy-version)%\" ClientID:\"%REQ(client-id)%\"\n\n"
              http2_protocol_options:
                connection_keepalive:
                  interval: 30s
                  timeout: 10s
              stream_idle_timeout: 0s
              request_timeout: 0s
              stat_prefix: ingress_http
              codec_type: AUTO
              use_remote_address: true
              route_config:
                name: unified_route
                virtual_hosts:
                - name: elchi_services
                  domains: ["*"]
                  routes:
                  # VictoriaMetrics query API
                  - match:
                      prefix: "/api/v1/"
                    route:
                      cluster: victoriametrics-cluster
                    typed_per_filter_config:
                      envoy.filters.http.cors:
                        "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.CorsPolicy
                        allow_origin_string_match:
                          - prefix: "*"
                        allow_methods: "GET, OPTIONS, POST"
                        allow_headers: "*"
                        max_age: "1728000"
                        expose_headers: "*"
                  # Otel metrics
                  - match:
                      prefix: "/opentelemetry"
                    route:
                      cluster: otel-cluster
                  # Control-plane registry-based routing with x-target-cluster header
                  {{- range $version := .Values.global.versions }}
                  {{- range $i, $e := until (int $.Values.global.elchiBackend.controlPlaneDefaultReplicas) }}
                  - match:
                      prefix: "/"
                      headers:
                      - name: "x-target-cluster"
                        string_match:
                          exact: "elchi-control-plane-{{ regexReplaceAll "-arm64$" $version.tag "" | replace "." "-" }}-{{ $i }}"
                    route:
                      cluster: control-plane-cluster-{{ regexReplaceAll "-arm64$" $version.tag "" | replace "." "-" }}-{{ $i }}
                      max_stream_duration:
                        max_stream_duration: 0s
                        grpc_timeout_header_max: 0s
                      timeout: 0s
                      idle_timeout: 0s
                  {{- end }}
                  {{- end }}
                  # Controller gRPC routing (individual pods)
                  {{- range $version := .Values.global.versions }}
                  {{- range $i, $e := until (int $.Values.global.elchiBackend.controllerDefaultReplicas) }}
                  - match:
                      prefix: "/"
                      headers:
                      - name: "x-target-cluster"
                        string_match:
                          exact: "elchi-controller-{{ regexReplaceAll "-arm64$" $version.tag "" | replace "." "-" }}-{{ $i }}"
                    route:
                      cluster: controller-grpc-cluster-{{ regexReplaceAll "-arm64$" $version.tag "" | replace "." "-" }}-{{ $i }}
                      max_stream_duration:
                        max_stream_duration: 0s
                      timeout: 0s
                      idle_timeout: 0s
                  {{- end }}
                  {{- end }}
                  # Controller REST routing (from-elchi requests)
                  - match:
                      prefix: "/"
                      headers:
                      - name: "from-elchi"
                        string_match:
                          exact: "yes"
                    route:
                      cluster: controller-rest-cluster
                      timeout: 0s
                      idle_timeout: 0s
                  - match:
                      prefix: "/"
                      headers:
                      - name: ":method"
                        string_match:
                          exact: "OPTIONS"
                    route:
                      cluster: controller-rest-cluster
                  # Default routes (frontend)
                  - match:
                      prefix: "/"
                    route:
                      cluster: elchi-cluster
              http_filters:
              - name: envoy.filters.http.ext_proc
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.ext_proc.v3.ExternalProcessor
                  grpc_service:
                    envoy_grpc:
                      cluster_name: registry-cluster
                  failure_mode_allow: true
                  processing_mode:
                    request_header_mode: SEND
                    response_header_mode: SKIP
                    request_body_mode: NONE
                    response_body_mode: NONE
              - name: envoy.filters.http.cors
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

      clusters:
      # Registry cluster for external processing
      - name: registry-cluster
        connect_timeout: 1s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            '@type': type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options:
                connection_keepalive:
                  interval: 30s
                  timeout: 10s
        load_assignment:
          cluster_name: registry-cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: elchi-registry.{{ .Values.global.namespace }}.svc.{{ $.Values.global.clusterDomain }}
                    port_value: 9090

      # Controller REST cluster (all versions combined)
      - name: controller-rest-cluster
        connect_timeout: 1s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        common_http_protocol_options:
          idle_timeout: 300s
        health_checks:
          - timeout: 2s
            interval: 5s
            unhealthy_threshold: 3
            healthy_threshold: 1
            tcp_health_check: {}
        load_assignment:
          cluster_name: controller-rest-cluster
          endpoints:
          - lb_endpoints:
            {{- range $version := .Values.global.versions }}
            {{- range $i, $e := until (int $.Values.global.elchiBackend.controllerDefaultReplicas) }}
            - endpoint:
                address:
                  socket_address:
                    address: elchi-controller-{{ regexReplaceAll "-arm64$" $version.tag "" | replace "." "-" }}-{{ $i }}.elchi-controller-{{ regexReplaceAll "-arm64$" $version.tag "" | replace "." "-" }}-headless.{{ $.Values.global.namespace }}.svc.{{ $.Values.global.clusterDomain }}
                    port_value: 8099
            {{- end }}
            {{- end }}

      # Controller gRPC clusters (individual pods)
      {{- range $version := .Values.global.versions }}
      {{- range $i, $e := until (int $.Values.global.elchiBackend.controllerDefaultReplicas) }}
      - name: controller-grpc-cluster-{{ regexReplaceAll "-arm64$" $version.tag "" | replace "." "-" }}-{{ $i }}
        connect_timeout: 1s
        type: LOGICAL_DNS
        lb_policy: ROUND_ROBIN
        common_lb_config:
          close_connections_on_host_set_change: true
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            '@type': type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options:
                connection_keepalive:
                  interval: 30s
                  timeout: 10s
        health_checks:
          - timeout: 1s
            interval: 5s
            unhealthy_threshold: 3
            healthy_threshold: 1
            tcp_health_check: {}
        load_assignment:
          cluster_name: controller-grpc-cluster-{{ regexReplaceAll "-arm64$" $version.tag "" | replace "." "-" }}-{{ $i }}
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: elchi-controller-{{ regexReplaceAll "-arm64$" $version.tag "" | replace "." "-" }}-{{ $i }}.elchi-controller-{{ regexReplaceAll "-arm64$" $version.tag "" | replace "." "-" }}-headless.{{ $.Values.global.namespace }}.svc.{{ $.Values.global.clusterDomain }}
                    port_value: 50051
      {{- end }}
      {{- end }}

      # Control Plane clusters (individual pods)
      {{- range $version := .Values.global.versions }}
      {{- range $i, $e := until (int $.Values.global.elchiBackend.controlPlaneDefaultReplicas) }}
      - name: control-plane-cluster-{{ regexReplaceAll "-arm64$" $version.tag "" | replace "." "-" }}-{{ $i }}
        connect_timeout: 15s
        type: LOGICAL_DNS
        lb_policy: ROUND_ROBIN
        health_checks:
          - timeout: 2s
            interval: 5s
            unhealthy_threshold: 3
            healthy_threshold: 1
            tcp_health_check: {}
        common_lb_config:
          close_connections_on_host_set_change: true
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            '@type': type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            common_http_protocol_options:
              idle_timeout: 0s
              max_connection_duration: 0s
            explicit_http_config:
              http2_protocol_options:
                connection_keepalive:
                  interval: 30s
                  timeout: 10s
        load_assignment:
          cluster_name: control-plane-cluster-{{ regexReplaceAll "-arm64$" $version.tag "" | replace "." "-" }}-{{ $i }}
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: elchi-control-plane-{{ regexReplaceAll "-arm64$" $version.tag "" | replace "." "-" }}-{{ $i }}.elchi-control-plane-{{ regexReplaceAll "-arm64$" $version.tag "" | replace "." "-" }}-headless.{{ $.Values.global.namespace }}.svc.{{ $.Values.global.clusterDomain }}
                    port_value: 18000
      {{- end }}
      {{- end }}

      # Frontend cluster
      - name: elchi-cluster
        connect_timeout: 1s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: elchi-cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: elchi.{{ $.Values.global.namespace }}.svc.{{ $.Values.global.clusterDomain }}
                    port_value: 80

      # OTEL cluster for metrics
      - name: otel-cluster
        connect_timeout: 1s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            '@type': type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options:
                connection_keepalive:
                  interval: 30s
                  timeout: 10s
        load_assignment:
          cluster_name: otel-cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: otel-collector.{{ $.Values.global.namespace }}.svc.{{ $.Values.global.clusterDomain }}
                    port_value: 4317
      # VictoriaMetrics cluster
      - name: victoriametrics-cluster
        connect_timeout: 1s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: victoriametrics-cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    {{- if $.Values.global.installVictoriaMetrics }}
                    address: victoriametrics.{{ $.Values.global.namespace }}.svc.{{ $.Values.global.clusterDomain }}
                    port_value: 8428
                    {{- else }}
                    {{- if not $.Values.global.victoriametrics.endpoint }}
                    {{- fail "When installVictoriaMetrics is false, global.victoriametrics.endpoint must be provided" }}
                    {{- end }}
                    {{- if contains "://" $.Values.global.victoriametrics.endpoint }}
                    {{- $parsed := urlParse $.Values.global.victoriametrics.endpoint }}
                    address: {{ $parsed.hostname }}
                    port_value: {{ default "8428" $parsed.port }}
                    {{- else }}
                    {{- $hostPort := split ":" $.Values.global.victoriametrics.endpoint }}
                    address: {{ index $hostPort 0 }}
                    port_value: {{ default "8428" (index $hostPort 1) }}
                    {{- end }}
                    {{- end }}
    admin:
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9901
