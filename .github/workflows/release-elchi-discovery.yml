name: Release elchi-discovery Chart

on:
  push:
    paths:
      - 'charts/elchi-discovery/**'
    branches: [main]
  workflow_dispatch:

# Set permissions for GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow builds to run in parallel, but only one GitHub Pages deployment at a time
concurrency:
  group: "pages-deploy"
  cancel-in-progress: false

jobs:
  release:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.10.0

    - name: Check if chart version changed
      id: version_check
      run: |
        CHART_VERSION=$(grep '^version:' charts/elchi-discovery/Chart.yaml | cut -d' ' -f2)
        if git show HEAD~1:charts/elchi-discovery/Chart.yaml 2>/dev/null | grep -q "^version: $CHART_VERSION"; then
          echo "version_changed=false" >> $GITHUB_OUTPUT
        else
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "chart_version=$CHART_VERSION" >> $GITHUB_OUTPUT
        fi

    - name: Package chart
      if: steps.version_check.outputs.version_changed == 'true'
      run: |
        helm dependency update charts/elchi-discovery
        helm package charts/elchi-discovery --destination .deploy

    - name: Prepare deployment directory
      if: steps.version_check.outputs.version_changed == 'true'
      run: |
        mkdir -p .gh-pages
        # Copy existing static files if they exist
        cp CNAME .gh-pages/ 2>/dev/null || echo "No CNAME file found"
        cp logo.png .gh-pages/ 2>/dev/null || echo "No logo file found"
        cp index.html .gh-pages/ 2>/dev/null || echo "No index.html file found"

    - name: Wait to avoid race conditions
      if: steps.version_check.outputs.version_changed == 'true'
      run: |
        # Add a longer delay to ensure elchi-stack deploys first if both are triggered
        echo "Waiting before deployment to avoid race conditions..."
        sleep 30
        
    - name: Download existing index.yaml
      if: steps.version_check.outputs.version_changed == 'true'
      run: |
        # Try to download existing index.yaml from GitHub Pages with retry
        for i in {1..3}; do
          if curl -f -s -o .gh-pages/index.yaml https://charts.elchi.io/index.yaml; then
            echo "Successfully downloaded existing index.yaml"
            break
          else
            echo "Attempt $i failed to download index.yaml"
            if [ $i -eq 3 ]; then
              echo "No existing index.yaml found after 3 attempts"
            else
              sleep 10
            fi
          fi
        done
        
    - name: Download existing chart packages
      if: steps.version_check.outputs.version_changed == 'true'
      run: |
        # Download all existing .tgz files if index.yaml exists
        if [ -f .gh-pages/index.yaml ]; then
          echo "Downloading existing chart packages..."
          # Extract chart URLs from existing index.yaml and download them
          if grep -q 'https://charts\.elchi\.io/[^"]*\.tgz' .gh-pages/index.yaml; then
            grep -o 'https://charts\.elchi\.io/[^"]*\.tgz' .gh-pages/index.yaml | sort -u | while read url; do
              filename=$(basename "$url")
              echo "Downloading $filename..."
              for attempt in {1..2}; do
                if curl -f -s -o ".gh-pages/$filename" "$url"; then
                  echo "Successfully downloaded $filename"
                  break
                else
                  echo "Attempt $attempt failed to download $filename"
                  if [ $attempt -eq 2 ]; then
                    echo "Failed to download $filename after 2 attempts"
                  else
                    sleep 5
                  fi
                fi
              done
            done
          else
            echo "No chart packages found in existing index.yaml"
          fi
        else
          echo "No existing index.yaml to process"
        fi

    - name: Update Helm repository
      if: steps.version_check.outputs.version_changed == 'true'
      run: |
        cp .deploy/*.tgz .gh-pages/
        cp artifacthub-repo.yml .gh-pages/ 2>/dev/null || true
        touch .gh-pages/.nojekyll
        echo "charts.elchi.io" > .gh-pages/CNAME
        # Remove README files that interfere with index.yaml
        rm -f .gh-pages/README.md .gh-pages/CLAUDE.md
        # Generate/update index.yaml (replaces existing)
        echo "Generating index.yaml..."
        helm repo index .gh-pages --url https://charts.elchi.io
        
    - name: Setup Pages
      if: steps.version_check.outputs.version_changed == 'true'
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      if: steps.version_check.outputs.version_changed == 'true'
      uses: actions/upload-pages-artifact@v3
      with:
        path: .gh-pages
        
    - name: Deploy to GitHub Pages
      if: steps.version_check.outputs.version_changed == 'true'
      id: deployment
      uses: actions/deploy-pages@v4